version: "3.8"

services:
  server:
    container_name: tetris-server
    restart: unless-stopped
    image: archql/tetris-server-prod:1.0.0
    # The keyword "build" will allow you to define
    # the path to the Dockerfile to use to create the image
    # that will allow you to execute the service.
    build:
      context: server
      dockerfile: Dockerfile
      target: production
    # If we want to access the server from our computer (outside the container),
    # we must share the content port with our computer's port.
    # To do this, the keyword 'ports' will help us.
    # Its syntax is as follows: [port we want on our machine]:[port we want to retrieve in the container]
#    ports:
#      - "3000:3000"
    volumes:
      - ./server/database:/usr/src/server/database
      - ./server/uploads:/usr/src/server/build/uploads
      - ./server/public/images:/usr/src/server/build/public/images
  # Second service (container): the client.
  # We use the keyword 'client' for the server.
  client:
    container_name: tetris-client
    restart: unless-stopped
    image: archql/tetris-client-prod:1.0.0
    build:
      context: client
      dockerfile: Dockerfile
      target: production
      args:
        - REACT_APP_PROXY_IP=tetris-server

    volumes:
      - ./log:/var/log/nginx/

    ports:
      - "80:80"

    # The keyword 'network_mode' is used to define the network type.
    # Here we define that the container can access to the 'localhost' of the computer.
    # network_mode: host

    # The keyword 'depends_on' allows you to define whether the service
    # should wait until other services are ready before launching.
    # Here, we want the 'client' service to wait until the 'server' service is ready.
    depends_on:
      - server